{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","pokemon","setPokemon","pokemonData","setPokemonData","pokemonType","setPokemonType","getPokemon","logAbility","a","ability","index","orginalArray","console","log","name","toArray","url","axios","get","res","push","data","types","type","abilities","forEach","id","className","onSubmit","e","preventDefault","onChange","target","value","toLowerCase","placeholder","map","style","backgroundImage","backgroundSize","src","sprites","other","alt","Math","round","height","weight","game_indices","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gQAmHeA,EA/GH,WACV,MAA8BC,mBAAS,SAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAsCF,mBAAS,IAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAAsCJ,mBAAS,IAA/C,mBAAOK,EAAP,KAAoBC,EAApB,KAEMC,EAAU,uCAAG,yBAsBRC,EAtBQ,SAAAC,EAAA,6DAsBRD,EAtBQ,SAsBGE,EAASC,EAAOC,GACdA,EAAaD,EAAQ,GACrBC,EAAaD,EAAQ,GAMzCE,QAAQC,IAAIF,EAAcD,GAAOD,QAAQK,MAGzCF,QAAQC,IAAI,wBAhCRE,EAAU,GADC,SAKTC,EALS,4CAKkChB,GALlC,SAMGiB,IAAMC,IAAIF,GANb,OAMTG,EANS,OAQfJ,EAAQK,KAAKD,EAAIE,MACjBhB,EAAec,EAAIE,KAAKC,MAAM,GAAGC,KAAKT,MACtCX,EAAeY,GACII,EAAIE,KAAKG,UAClBC,QAAQlB,GACZmB,EAAMP,EAAIE,KAAKK,GACrBd,QAAQC,IAAIa,GAEZd,QAAQC,IAAIM,GAhBG,kDAoBfP,QAAQC,IAAR,MApBe,0DAAH,qDAiDhB,OACE,sBAAKc,UAAU,MAAf,UACE,sBAAMC,SARW,SAACC,GACpBA,EAAEC,iBACFxB,KAME,SACE,gCACE,uBAAOiB,KAAK,OAAOQ,SAdN,SAACF,GACpB5B,EAAW4B,EAAEG,OAAOC,MAAMC,gBAauBC,YAAY,2BAGxDjC,EAAYkC,KAAI,SAACf,GAChB,OAAO,mCACL,sBAAKgB,MAAO,CAAEC,gBAAgB,wGAAD,OAA0GjB,EAAKK,GAA/G,UAA2Ha,eAAgB,WAAaZ,UAAU,YAA/L,UACA,qBAAKa,IAAKnB,EAAKoB,QAAQC,MAAO,oBAApB,cAA2DC,IAAKtB,EAAKP,OAC7E,qBAAKa,UAAU,WAAf,SACE,sBAAKA,UAAU,eAAf,UACA,sBAAKA,UAAU,cAAf,UACE,qBAAKA,UAAU,eAAf,kBACA,qBAAKA,UAAU,eAAf,SAA+BvB,OAEjC,sBAAKuB,UAAU,cAAf,UACE,qBAAKA,UAAU,eAAf,oBACA,sBAAKA,UAAU,eAAf,UAA+B,IAAKiB,KAAKC,MAAoB,IAAdxB,EAAKyB,QAApD,WAEF,sBAAKnB,UAAU,cAAf,UACE,qBAAKA,UAAU,eAAf,oBACA,sBAAKA,UAAU,eAAf,UAA+B,IAAKiB,KAAKC,MAAMxB,EAAK0B,OAAS,GAA7D,aAEF,sBAAKpB,UAAU,cAAf,UACE,qBAAKA,UAAU,eAAf,+BACA,qBAAKA,UAAU,eAAf,SAA+BN,EAAK2B,aAAaC,YAEnD,sBAAKtB,UAAU,cAAf,UACE,qBAAKA,UAAU,eAAf,uBACA,qBAAKA,UAAU,eAAf,SAA+BN,EAAKG,UAAU,GAAGf,QAAQK,UAO3D,sBAAKa,UAAU,cAAf,UACE,qBAAKA,UAAU,eAAf,uBACA,qBAAKA,UAAU,eAAf,SAA+BN,EAAKG,UAAU,GAAGf,QAAQK,2BCtF5DoC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.dd57ef05.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport './App.css';\n\nconst App = () => {\n  const [pokemon, setPokemon] = useState(\"eevee\");\n  const [pokemonData, setPokemonData] = useState([]);\n  const [pokemonType, setPokemonType] = useState(\"\");\n\n  const getPokemon = async () => {\n    const toArray = [];\n    \n    \n    try {\n      const url = `https://pokeapi.co/api/v2/pokemon/${pokemon}`\n      const res = await axios.get(url);\n      // set useSate to the data that we want\n      toArray.push(res.data);\n      setPokemonType(res.data.types[0].type.name);\n      setPokemonData(toArray);\n      const abilities = (res.data.abilities);\n      abilities.forEach(logAbility);\n      const id = (res.data.id);\n      console.log(id);\n      \n      console.log(res);\n      // console.log(res.data.abilities[0].ability.name);\n      // console.log(abilities);\n    } catch (e) {\n      console.log(e);\n    }\n    function logAbility(ability, index, orginalArray) {\n      const nextAbility = orginalArray[index + 1];\n      const prevAbility = orginalArray[index - 1];\n      // prevAbility ? console.log(prevAbility):\n      // nextAbility ? console.log(nextAbility): \n      // console.log(ability, index, array)\n      // console.log(ability);\n      // console log next ability of there is one\n      console.log(orginalArray.[index].ability.name)\n      // if (nextAbility) {console.log(nextAbility);}\n      // console.log(orginalArray.[index + 1]);\n      console.log('---------*---------')\n    }\n  };\n  \n  \n\n  const handleChange = (e) => {\n    setPokemon(e.target.value.toLowerCase());\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    getPokemon();\n  }\n  // backgroundImage: url(\"\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/{data.id}}.png\"\")\n  \n  return (\n    <div className=\"App\">\n      <form onSubmit={handleSubmit}>\n        <label>\n          <input type=\"text\" onChange={handleChange} placeholder=\"Enter Pokemon Name\" />\n        </label>\n        </form> \n        {pokemonData.map((data) => {\n          return(<>\n            <div style={{ backgroundImage: `url(\"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${data.id}.png\")`, backgroundSize: 'contain' }} className=\"container\">\n            <img src={data.sprites.other.[\"official-artwork\"].[\"front_default\"]} alt={data.name}/>\n              <div className=\"divTable\">\n                <div className=\"divTableBody\">\n                <div className=\"divTableRow\">\n                  <div className=\"divTableCell\">Type</div>\n                  <div className=\"divTableCell\">{pokemonType}</div>\n                </div>\n                <div className=\"divTableRow\">\n                  <div className=\"divTableCell\">Height</div>\n                  <div className=\"divTableCell\">{\" \"}{Math.round(data.height * 3.9)} \"</div>\n                </div>\n                <div className=\"divTableRow\">\n                  <div className=\"divTableCell\">Weight</div>\n                  <div className=\"divTableCell\">{\" \"}{Math.round(data.weight / 4)} lbs</div>\n                </div>\n                <div className=\"divTableRow\">\n                  <div className=\"divTableCell\">Number of Battles</div>\n                  <div className=\"divTableCell\">{data.game_indices.length}</div>\n                </div>\n                <div className=\"divTableRow\">\n                  <div className=\"divTableCell\">Abilities</div>\n                  <div className=\"divTableCell\">{data.abilities[0].ability.name}</div>\n                </div>\n                \n                {/* TODO - create a list of abilities and display them all in one cell - joined with a , */}\n            \n\n\n                <div className=\"divTableRow\">\n                  <div className=\"divTableCell\">Abilities</div>\n                  <div className=\"divTableCell\">{data.abilities[1].ability.name}</div>\n                </div>\n                {/* <div className=\"divTableRow\"> */}\n                  {/* <div className=\"divTableCell\">Abilities</div> */}\n                  {/* <div className=\"divTableCell\">{data.abilities[2].ability.name}   </div> */}\n                {/* </div> */}\n              </div>\n            </div>\n            </div>\n            </>  )\n        })}\n        \n    </div>\n  );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}